#!/bin/sh
#
# Simple posix fetch script.
#
# Based on Neofetch.
#
# Created by Dylan Araps

get_title() {
    printf "\\e[1m%s\\n\\e[0m" "${USER:-$(whoami)}@$(hostname)"
}


get_distro() {
    release_file="/etc/os-release"

    if [ -f "$release_file" ]; then
        . "$release_file"
        info "OS" "${PRETTY_NAME:-${DISTRIB_DESCRIPTION}} \
                   ${UBUNTU_CODENAME}"
    fi
}


get_host() {
    if [ -f /sys/devices/virtual/dmi/id/product_name ] ||
       [ -f /sys/devices/virtual/dmi/id/product_version ]; then
        host="$(cat /sys/devices/virtual/dmi/id/product_name)"
        host="$host $(cat /sys/devices/virtual/dmi/id/product_version)"

    elif [ -f /sys/firmware/devicetree/base/model ]; then
        host="$(cat /sys/firmware/devicetree/base/model)"

    elif [ -f /tmp/sysinfo/model ]; then
        host="$(cat /tmp/sysinfo/model)"
    fi

    info "Host" "$host"
}


get_uptime() {
    secs="$(cat /proc/uptime)"
    secs="${secs%%.*}"

    days="$((secs / 60 / 60 / 24))d"
    hours="$((secs / 60 / 60 % 24))h"
    mins="$((secs / 60 % 60))m"

    [ "$days" = 0d ] &&  unset days
    [ "$hours" = 0h ] && unset hours
    [ "$mins" = 0m ] &&  unset mins

    uptime="${days:+$days }${hours:+$hours }${mins}"
    uptime="${uptime:-${secs}s}"

    info "Uptime" "$uptime"
}


get_kernel() {
    info "Kernel" "$(uname -r)"
}


get_shell() {
    shell="${SHELL##*/}"

    case "$shell" in
        "bash") shell="$shell ${BASH_VERSION%(*}" ;;
        "sh" | "ash" | "dash") ;;

        "mksh" | "ksh")
            # shellcheck disable=2016
            version="$("$shell" -c 'printf "%s" "$KSH_VERSION"')"
            shell="$shell ${version#*KSH }"
        ;;

        "zsh")
            shell="$("$shell" --version)"
            shell="${shell%(*}"
        ;;
    esac

    info "Shell" "$shell"
}


get_memory() {
    while IFS=":" read -r a b; do
        case "$a" in
            "MemTotal")
                mem_used="$((mem_used+=${b%kB}))"; mem_total="${b%kB}"
            ;;

            "Shmem")
                mem_used="$((mem_used+=${b%kB}))"
            ;;

            "MemFree" | "Buffers" | "Cached" | "SReclaimable")
                mem_used="$((mem_used-=${b%kB}))"
            ;;
        esac
    done < /proc/meminfo

    mem_used="$((mem_used / 1024))MiB"
    mem_total="$((mem_total / 1024))MiB"

    info "Memory" "$mem_used / $mem_total"
}


get_wm() {
    id="$(xprop -root -notype _NET_SUPPORTING_WM_CHECK)"
    id="${id##* }"
    wm="$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t)"
    wm="${wm%\"*}"
    wm="${wm#*\"}"

    info "WM" "$wm"
}


get_term() {
    while [ -z "$term" ]; do
        if [ "$SSH_CONNECTION" ]; then
            term="$SSH_TTY"; break

        else
            ppid="$(grep -i -F "PPid:" "/proc/${parent:-$PPID}/status")"
            parent="$(trim "${ppid#PPid:}")"
            [ -z "$parent" ] && break

            name="$(cat "/proc/${parent:-$PPID}/comm")"

            case "$(trim "$name")" in
                "${SHELL##*/}" | *"sh" | "tmux"* | "screen" | "su"*) ;;
                "login"* | *"Login"* | "init" | "(init)") term="$(tty)" ;;
                "ruby" | "1" | "systemd" | "sshd"* | "python"* | "USER"*"PID"* | "kdeinit"*)
                    break
                ;;
                "gnome-terminal-") term="gnome-terminal" ;;
                *"nvim") term="Neovim Terminal" ;;
                *"NeoVimServer"*) term="VimR Terminal" ;;
                *) term="${name##*/}" ;;
            esac
        fi
    done

    info "Terminal" "$term"
}


get_resolution() {
    if command -v xrandr >/dev/null; then
        resolution="$(xrandr --nograb --current |\
                      awk -F 'connected |\\+|\\(' \
                             '/ connected/ && $2 {printf $2 ", "}')"
        resolution="${resolution%, }"
        info "Resolution" "${resolution#primary }"
    fi
}


get_cols() {
    printf "\\n"
    i=1; while [ "$i" -lt 8 ]; do
        printf "%b" "\\e[4${i}m  \\e[0m"
        i="$((i+1))"
    done
    printf "\\n\\n"
}


trim() {
    set -f
    # shellcheck disable=2048,2086
    set -- $*
    printf "%s\\n" "$*"
    set +f
}


info() {
    reset="\\e[0m"
    title_color="\\e[32m"

    printf "%b: %s\\n" "${title_color}${1}${reset}" "$2"
}


main() {
    get_title
    get_distro
    get_host
    get_uptime
    get_kernel
    get_shell
    get_memory
    get_wm
    get_term
    get_resolution

    get_cols
}

main "$@"
