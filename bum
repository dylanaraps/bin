#!/usr/bin/env python3
"""
bum - album art viewer for mopidy-spotify.
"""
import pathlib
import signal
import shutil
import subprocess
import tkinter as tk

import musicbrainzngs as mus
from PIL import ImageTk, Image


__version__ = "0.0.1"


HOME = pathlib.Path.home()
CACHE_DIR = HOME / ".cache/bum/"


# Signal Handling {{{


def signal_usr1(*args):
    """Handle 'pkill -USR1 bum'."""
    print("Recieved SUGUSR1, swapping album art.")

    get_art()

    # We don't need the arguments yet they're mandatory
    # when using signal.
    del args


def signal_sigint(*args):
    """Handle sigint."""
    del args
    exit(0)


# }}}


# Song {{{


def get_song():
    """Get the current playing song."""
    song = subprocess.getoutput("mpc current -f '%artist%ðŸ’©%title%ðŸ’©%album%'")

    if song:
        return song.split("ðŸ’©")


# }}}


# Musicbrainz {{{


def get_cover(song_data):
    """Download the cover art."""
    mus.set_useragent("python-bum: A cover art daemon.",
                      "0.0.1",
                      "https://github.com/dylanaraps/bum")

    try:
        data = mus.search_releases(artist=song_data[0],
                                   release=song_data[2],
                                   limit=1)
        release_id = data["release-list"][0]["release-group"]["id"]

        return mus.get_release_group_image_front(release_id, size=250)

    except mus.NetworkError:
        get_cover(song_data)

    except mus.ResponseError:
        print("error: Couldn't find album art for",
              f"{song_data[0]} - {song_data[1]}")

# }}}


# Misc {{{


def bytes_to_file(input_data, output_file):
    """Save bytes to a file."""
    pathlib.Path(output_file.parent).mkdir(parents=True, exist_ok=True)

    with open(output_file, "wb") as file:
        file.write(input_data)


# }}}


# Main {{{


def get_art():
    """Get the album art and display it."""
    song_data = get_song()

    if not song_data:
        return

    file_name = f"{song_data[0]}_{song_data[2]}.jpg".replace("/", "")
    file_name = CACHE_DIR / file_name

    if file_name.is_file():
        shutil.copy(file_name, CACHE_DIR / "current.jpg")
        print("album: Found cached art.")

    else:
        album_art = get_cover(song_data)

        if album_art:
            bytes_to_file(album_art, CACHE_DIR / file_name)
            bytes_to_file(album_art, CACHE_DIR / "current.jpg")

            print(f"album: Swapped art to {', '.join(song_data)}.")


def main():
    """Main function."""
    signal.signal(signal.SIGUSR1, signal_usr1)
    signal.signal(signal.SIGINT, signal_sigint)

    window = tk.Tk()
    window.title("bum")
    window.geometry("250x250+1606+766")

    # Display the initial art.
    get_art()

    img = ImageTk.PhotoImage(Image.open(CACHE_DIR / "current.jpg"))
    panel = tk.Label(window, image=img)
    panel.pack(side="bottom", fill="both", expand="yes")

    # Open `qiv` and watch the image.
    # subprocess.Popen(["qiv", "--center", "--fixed_width", "250",
    #                   "--readonly", "--disable_grab",
    #                   "--watch", CACHE_DIR / "current.jpg"])

    # Main loop.
    while True:
        img = ImageTk.PhotoImage(Image.open(CACHE_DIR / "current.jpg"))
        panel.configure(image=img)
        window.update_idletasks()
        window.update()
        signal.pause()


if __name__ == "__main__":
    main()


# }}}
