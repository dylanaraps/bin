#!/usr/bin/env bash
#
# program

clear_screen() {
    # Clear the screen.
    #
    # '\e[?7l':  Disable line wrapping.
    # '\e[?25l': Hide the cursor.
    # '\e[2J':   Clear the screen.
    # '\e[H':    Move the cursor to '0,0' (home).
    printf '\e[?7l\e[?25l\e[2J\e[H'
}

get_term_size() {
    # Get the terminal lines and columns.
    # This can't reliably be done in pure bash.
    # 'stty' is used as it's POSIX and always available.
    read -r LINES COLUMNS < <(stty size)
}

read_file() {
    # Error handling for null file or non-existent file.
    if [[ ! -f "$1" ]]; then
        # '>&2':        Print the error string to 'stderr'.
        # '${1:-null}': If '$1' is empty, display 'null'.
        printf '%s\n' "${1:-null}: No such file." >&2
        exit 1
    fi

    # Read the file into an array line by line.
    # bash 4+: Use 'readarray'/'mapfile'.
    while IFS= read -r line; do
        file_contents+=("$line")
    done < "$1"
}

print_file() {
    # Print the portions of the file that fit on the screen.
    for ((i=0;i<LINES-2;i++)); {
        printf '%s\n' "${file_contents[i]}"
    }

    # Reset the cursor position.
    printf '\e[H'
}

get_key() {
    # Handle user input.
    case "$1" in
        # 'B' is what bash sees when you press 'Down Arrow'.
        # It's a portion of the escape sequence '\e[B' (cursor down).
        B|j) ;;

        # 'A' is what bash sees when you press 'Up Arrow'.
        # It's a portion of the escape sequence '\e[A' (cursor up).
        A|k) ;;

        # Exit the program on press of 'q'.
        q) exit ;;
    esac
}

main() {
    # Read the file.
    # Error handling is done in the function.
    read_file "$1"

    get_term_size
    clear_screen

    # Trap 'EXIT'.
    # This is required to reset the terminal to a useable
    # state on Ctrl+C, 'exit' etc.
    # '\e[?7h':  Re-enable line wrapping.
    # '\e[?25h': Re-enable the cursor.
    trap 'clear_screen; printf "\e[?7h\e[?25h"' EXIT

    # Trap 'SIGWINCH'
    # This signal allows us to react to a window size change.
    # Whenever the window is resized, we re-fetch the terminal size.
    trap 'get_term_size; clear_screen; print_file' WINCH

    # Main loop.
    for ((;;)); {
        print_file

        # Wait for user to press a key.
        # Value is stored in '$REPLY'
        read -rsn 1 && get_key "$REPLY"
    }
}

main "$@"
